import react, {useState} from "react"

const StatusTest = ({name}) => {

    const [userInput,setUserInput] = useState({
        name: "",
        age: 0
    })

    const [allUsers,setAllUsers] = useState([
        {
            id: 10,
            name:"John",
            age:47
        },
        {
            id:11,
            name:"Sarah",
            age:32
        },
        {
            id:12,
            name:"James",
            age:15
        },
        {
            id:13,
            name:"Susan",
            age:60
        },
        {
            id:14,
            name:"Gemma",
            age:27
        }
    ])

    const increaseAge = (currentUser) => (event) => {
        // send currentUser array
        // send event in second callback
        const newState = allUsers.map(user => {

            if (user.id === currentUser.id) {
              return {...user, age: currentUser.age+1};
            }
      
            return user;
          });

          // console.log(newState)
      
          setAllUsers(newState);
    }
    const removeUser = (currentUser) => (event) => {
        const newState = allUsers.filter(user=>(user.id !== currentUser.id)) 
        setAllUsers(newState);
    }
    const updateUserInput = (type) => (event) => {
        if (type!=="name" && type!=="age") {return false;}
        const input = event.target.value;
        if (type==="name") {
            const reg = new RegExp('^[a-zA-Z]+$');
            if (reg.test(input) || input.length===0) {setUserInput(state => ({...state, name:input}))}
        }
        if (type==="age") {
            const reg = new RegExp('^[0-9]+$');
            if (reg.test(input) || input.length===0) {setUserInput(state => ({...state, age:input}))}
        }
    }
    const addNewUser = () => {
        console.log("add new user")
        // check input is good to go
        // add new user to the allUsers object
        // get latest id to use
        const userIds = allUsers.map(user=> user.id)
        const id = userIds.length>0 ? Math.max(...userIds)+1 : 1;
        const newUser = {id:id,name:userInput.name,age:userInput.age}
        setAllUsers(state=>([...state, newUser]))
    }

    return (
    <div>
        {allUsers.map(currentUser => (
            <p key={currentUser.id}>
                <span>Hi {currentUser.name}, you are {currentUser.age} years old.</span>
                <br />
            <button onClick={increaseAge(currentUser)
            }>Increase Age</button>
            <br />
            <button onClick={removeUser(currentUser)
            }>Remove User</button>

            </p>
        ))}

        <div>
            <h3>Add new User</h3>
            <label htmlFor="name">Name: </label><input onChange={updateUserInput("name")} id="name" type="text" value={userInput.name} /><br />
            <label htmlFor="age">Age: </label><input onChange={updateUserInput("age")} id="age" type="text" value={userInput.age} /><br />
            <button onClick={addNewUser}>Add User</button>
        </div>
        
    </div>
    )
}

export default StatusTest
